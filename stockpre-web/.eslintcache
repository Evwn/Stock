[{"C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\index.js":"1","C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\reportWebVitals.js":"2","C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\navigation\\index.js":"3","C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\stocks\\index.js":"4","C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\navigation\\search.js":"5","C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\navigation\\lookup.js":"6","C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\navigation\\components.js":"7","C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\stocks\\components.js":"8","C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\stocks\\buttons.js":"9","C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\stocks\\lookup.js":"10","C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\App.js":"11","C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\stocks\\detail.js":"12","C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\stocks\\list.js":"13","C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\stocks\\datafeed.js":"14","C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\lookup\\index.js":"15","C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\stocks\\streaming.js":"16","C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\charting_library\\charting_library.esm.js":"17","C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\lookup\\components.js":"18","C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\ENV.js":"19"},{"size":1292,"mtime":1752301193000,"results":"20","hashOfConfig":"21"},{"size":362,"mtime":1752301193000,"results":"22","hashOfConfig":"21"},{"size":287,"mtime":1752301193000,"results":"23","hashOfConfig":"21"},{"size":453,"mtime":1752301193000,"results":"24","hashOfConfig":"21"},{"size":3364,"mtime":1752353178115,"results":"25","hashOfConfig":"21"},{"size":211,"mtime":1752301193000,"results":"26","hashOfConfig":"21"},{"size":4671,"mtime":1752301193000,"results":"27","hashOfConfig":"21"},{"size":12378,"mtime":1752357266163,"results":"28","hashOfConfig":"21"},{"size":3165,"mtime":1752301193000,"results":"29","hashOfConfig":"21"},{"size":641,"mtime":1752301193000,"results":"30","hashOfConfig":"21"},{"size":634,"mtime":1752301193000,"results":"31","hashOfConfig":"21"},{"size":5008,"mtime":1752301193000,"results":"32","hashOfConfig":"21"},{"size":2270,"mtime":1752353163780,"results":"33","hashOfConfig":"21"},{"size":4755,"mtime":1752357121515,"results":"34","hashOfConfig":"21"},{"size":72,"mtime":1752301193000,"results":"35","hashOfConfig":"21"},{"size":1013,"mtime":1752357131670,"results":"36","hashOfConfig":"21"},{"size":12276,"mtime":1752301193000,"results":"37","hashOfConfig":"21"},{"size":1528,"mtime":1752301193000,"results":"38","hashOfConfig":"21"},{"size":186,"mtime":1752350634426,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"l5znm4",{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\index.js",[],"C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\reportWebVitals.js",[],"C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\navigation\\index.js",[],"C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\stocks\\index.js",[],"C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\navigation\\search.js",["86","87","88","89"],"import { fade, InputBase, makeStyles, TextField } from \"@material-ui/core\";\nimport { SearchRounded } from \"@material-ui/icons\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport React, { useState, useEffect } from \"react\";\n\nimport { apiStockSearch } from \"./lookup\";\nimport Swal from 'sweetalert2';\n\nexport function StockSearchComponent(props) {\n  const classes = useStyles();\n  const [searchTerm, setSearchTerm] = useState(undefined);\n  const [searchResults, setSearchResults] = useState([]);\n\n  const handleSearchTermChange = (event, value) => {\n    if (event && event.type === 'change') {\n      console.log(\"TYPED: \", event.target.value)\n      setSearchTerm(event.target.value);\n    } else {\n      console.log(\"AUTO SEARCH: \", value);\n      setSearchTerm(value);\n    }\n    console.log(\"SEARCHTERM: \", searchTerm);\n  };\n\n  const handleSearchSubmit = (event) => {\n    console.log(\"SEARCH SUBMIT: \", event);\n    console.log(searchTerm);\n    event.preventDefault();\n    let regex = /([^-]+) - .*/;\n    const match = searchTerm.match(regex);\n    if (match.length === 0) {\n      window.location.href = `/stocks/${searchTerm.toUpperCase()}`\n      return;\n    }\n    window.location.href = `/stocks/${match[1].toUpperCase()}`\n  };\n\n  const handleSearchTermLookup = (response, status) => {\n    if (status === 200) {\n      setSearchResults([...response]);\n      console.log(\"SEARCH RESULTS: \", searchResults);\n    } else if (status === 403) {\n      Swal.fire({icon: 'error', title: 'Unauthorized', text: 'Must login to access'});\n    } else {\n      Swal.fire({icon: 'error', title: 'Stock Error', text: `Error finding stock, status: ${status}`});\n    }\n  };\n\n  useEffect(() => {\n    apiStockSearch(searchTerm, handleSearchTermLookup);\n  }, [searchTerm]);\n\n  return (\n    <form style={{padding: \"0px 10% 0px 10%\",width: \"75%\"}} onSubmit={handleSearchSubmit}>\n      <Autocomplete \n        id=\"demo\" \n        value={searchTerm}\n        freeSolo\n        options={searchResults.map((option) => {\n          return option.ticker + \" - \" + option.company_name\n        })}\n        getOptionLabel={option => option}\n        getOptionSelected={(option, value) => option === value.ticker}\n        onChange={handleSearchTermChange} \n        onInputChange={(event) => handleSearchTermChange(event, undefined)}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label=\"Ticker\"\n            margin=\"normal\"\n            variant=\"outlined\"\n          /> \n        )}\n      />\n    </form>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  search: {\n    position: \"relative\",\n    borderRadius: \"50px\",\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    \"&:hover\": {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: \"50%\",\n    [theme.breakpoints.up(\"sm\")]: {\n      marginLeft: theme.spacing(1),\n      width: \"50%\",\n    },\n  },\n  searchIcon: {\n    padding: theme.spacing(0,2),\n    height: \"100%\",\n    position: \"absolute\",\n    pointerEvents: \"none\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  inputRoot: {\n    color: \"inherit\",\n    width: \"100%\"\n  },\n  inputInput: {\n    padding: theme.spacing(3, 1, 1, 0),\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create(\"width\"),\n    width: \"100%\",\n  },\n}));\n","C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\navigation\\lookup.js",[],"C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\navigation\\components.js",["90","91"],"import React from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { StockSearchComponent } from \"./search\";\n\n// Max and Ahmed Material UI\nimport { AppBar, IconButton, Toolbar, List, ListItem, ListItemText, makeStyles, Container, useScrollTrigger, Link, Zoom, Fab } from \"@material-ui/core\";\nimport { HomeRounded, KeyboardArrowUpRounded } from \"@material-ui/icons\";\nimport { PropTypes } from \"prop-types\";\nimport Papa from \"papaparse\";\nimport fs from \"fs\";\n\nconst navLinks = [\n  { title: \"Profile\", path: \"/profile\" },\n  { title: \"Logout\", path: \"/logout\" },\n]\n\nconst useStyles = makeStyles((theme) => ({\n  colorScheme: {\n    background: \"linear-gradient(180deg, #FE6B8B 30%, #E8A87C 90%)\"\n  },\n  navDisplayFlex: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  navbarDisplayFlex: {\n    display: \"flex\",\n    justifyContent: \"space-between\"\n  },\n  linkText: {\n    marginTop: \"5px\",\n    textDecoration: \"none\",\n    textTransform: \"none\",\n    color: \"white\",\n    \"&:hover\": {\n      color: \"white\",\n      textDecoration: \"none\"\n    }\n  },\n  scrollTop: {\n    position: \"fixed\",\n    bottom: theme.spacing(2),\n    right: theme.spacing(2)\n  },\n  toolbar: {\n    marginBottom: \"5px\"\n  }\n}));\n\nexport const HeaderComponent = (props) => {\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n      <Toolbar id=\"back-to-top-anchor\"/>\n      <ElevationScroll {...props}>\n        <AppBar className={classes.colorScheme}>\n          <Toolbar className={classes.toolbar} id=\"back-to-top-anchor\">\n            <Container maxWidth=\"xl\" className={classes.navbarDisplayFlex}>\n              <IconButton href=\"/\" className={classes.linkText} edge=\"start\" color=\"inherit\" aria-label=\"home\">\n                <HomeRounded fontSize=\"large\"/>\n              </IconButton>\n              <StockSearchComponent/>\n              <List component=\"nav\" aria-labelledby=\"main navigation\" className={classes.navDisplayFlex}>\n                {navLinks.map(({ title, path }) => (\n                  <Link href={path} key={title} className={classes.linkText} underline=\"always\">\n                    <ListItem button>\n                      <ListItemText primary={title}/>\n                    </ListItem>\n                  </Link>\n                ))}\n              </List>\n            </Container>\n          </Toolbar>\n        </AppBar>\n      </ElevationScroll>\n      <ScrollTop {...props}>\n        <Fab className={classes.colorScheme} size=\"small\" aria-label=\"scroll back to top\">\n          <KeyboardArrowUpRounded/>\n        </Fab>\n      </ScrollTop>\n      <br/>\n    </React.Fragment>\n  );\n}\n\nfunction ElevationScroll(props) {\n  const { children } = props;\n  const trigger = useScrollTrigger({\n    disableHysteresis: true,\n    threshold: 0\n  });\n  return React.cloneElement(children, {\n    elevation: trigger ? 4 : 0,\n  });\n}\n\nfunction ScrollTop(props) {\n  const { children, window } = props;\n  const classes = useStyles();\n  const trigger = useScrollTrigger({\n    target: window ? window() : undefined,\n    disableHysteresis: true,\n    threshold: 100\n  });\n  const handleClick = (event) => {\n    const anchor = (event.target.ownerDocument || document).querySelector(\"#back-to-top-anchor\");\n    if (anchor) {\n      anchor.scrollIntoView({ behavior: \"smooth\", block: \"center\"});\n    }\n  };\n  return (\n    <Zoom in={trigger}>\n      <div onClick={handleClick} role=\"presentation\" className={classes.scrollTop}>\n        {children}\n      </div>\n    </Zoom>\n  );\n}\n\nScrollTop.propTypes = {\n  children: PropTypes.element.isRequired,\n  window: PropTypes.func,\n};\n\n// Working code\nexport function StockLink(props) {\n  const { stock } = props;\n  const handleStockLink = (event) => {\n    event.preventDefault();\n    window.location.href = `/stocks/${stock.ticker}`;\n  };\n  return <span onClick={handleStockLink}>{stock.ticker} </span>;\n}\n\nexport function NavigationComponent(props) {\n  return (\n    <Container>\n      <Row className=\"navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow\">\n        <Col>\n          {\" \"}\n          <StockSearchComponent />{\" \"}\n        </Col>\n        <Col>\n          {\" \"}\n          <HomeLink />{\" \"}\n        </Col>\n        <Col>\n          {\" \"}\n          <ProfileLink />{\" \"}\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nfunction HomeLink(props) {\n  const handleHomeLink = (event) => {\n    event.preventDefault();\n    window.location.href = \"/\";\n  };\n  return <span onClick={handleHomeLink}>Home</span>;\n}\n\nfunction ProfileLink(props) {\n  const handleProfileLink = (event) => {\n    event.preventDefault();\n    window.location.href = \"/profile\";\n  };\n  return <span onClick={handleProfileLink}>Profile</span>;\n}\n","C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\stocks\\components.js",["92","93","94","95","96","97","98","99"],"import React, { useState, useEffect } from \"react\";\nimport { apiStockLookup, apiPredictionLookup, apiStockAction } from \"./lookup\";\nimport { Stock } from \"./detail\";\nimport { StockList } from \"./list\";\nimport { ActionButton, AddRemoveButton } from \"./buttons\";\nimport { authToken } from \"../App.js\";\nimport Swal from 'sweetalert2';\n\nimport {\n  Button,\n  Card,\n  CardActionArea,\n  CardContent,\n  CardHeader,\n  CardMedia,\n  Chip,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\n\n// Shows singe quote and prediction. Routes to detailed view\nexport function StockLink(props) {\n  const {\n    stock,\n    length,\n    didPredictionLookup,\n    prediction,\n    handleBackendPredictionLookup,\n  } = props;\n  const [currentPrice, setCurrentPrice] = useState(\"Loading...\");\n  const [percentChange, setPercentChange] = useState(\"Loading...\");\n  const [currPrediction, setCurrPrediction] = useState(null);\n  const classes = useStyles();\n\n  const handleStockLink = (event) => {\n    event.preventDefault();\n    window.location.href = `/stocks/${stock.ticker.toUpperCase()}`;\n  };\n\n  const handleRemove = (event) => {\n    event.preventDefault();\n    apiStockAction(stock.ticker, false, () => {});\n  };\n\n  const update = () => {\n    fetch(\n      `https://query1.finance.yahoo.com/v8/finance/chart/${stock.ticker}?interval=1d&range=1d`\n    ).then((request) => {\n      request.json().then((fullfilled_request) => {\n        console.log(\"Filled\", fullfilled_request);\n        try {\n          const result = fullfilled_request.chart.result[0];\n          const quote = result.indicators.quote[0];\n          const timestamp = result.timestamp[0];\n          const open = quote.open[0];\n          const close = quote.close[0];\n          \n          setCurrentPrice(close.toFixed(2));\n          const percentChange = ((close - open) / open) * 100;\n          setPercentChange(\n            (percentChange < 0.0 ? \"\" : \"+\") + percentChange.toFixed(2) + \"%\"\n          );\n        } catch (error) {\n          console.error(\"Error parsing stock data:\", error);\n          setCurrentPrice(\"Loading...\");\n          setPercentChange(\"Loading...\");\n        }\n      });\n    }).catch((error) => {\n      console.error(\"Error fetching stock data:\", error);\n      setCurrentPrice(\"Error\");\n      setPercentChange(\"Error\");\n    });\n  };\n\n  useEffect(() => {\n    if (didPredictionLookup === false && !currPrediction) {\n      apiPredictionLookup(stock.ticker, handleBackendPredictionLookup);\n    }\n    if (prediction && !currPrediction) {\n      setCurrPrediction(prediction);\n    }\n    const interval = setInterval(() => {\n      update();\n    }, 5000 * length);\n    return () => {\n      setCurrPrediction(null);\n      clearInterval(interval);\n    };\n  }, [didPredictionLookup, handleBackendPredictionLookup, prediction]);\n\n  // Zane's working example\n  // return (\n  //   <div onClick={handleStockLink} className=\"border m-3 p-3\">\n  //     <h5>{stock.ticker}</h5>\n  //     <h6>{stock.company_name}</h6>\n  //     <div onClick={handleStockLink}>\n  //       {currentPrice.toFixed(2)} ({percentChange >= 0 && <span>+</span>}{(percentChange * 100).toFixed(2)}%)\n  //     </div>\n  //   </div>\n  // );\n\n  // Max testing\n  return (\n    <Grid\n      container\n      spacing={0}\n      direction=\"column\"\n      alignItems=\"center\"\n      justify=\"space-evenly\"\n    >\n      <Card className={classes.root}>\n        <CardHeader\n          className={classes.header}\n          title={stock.company_name}\n          subheader={stock.ticker}\n        />\n        <CardContent>\n          <Grid\n            container\n            direction=\"row\"\n            alignContent=\"flex-start\"\n            justify=\"space-evenly\"\n          >\n            <Grid item>\n              <Typography>Current Price: {currentPrice}</Typography>\n              <Typography>Change: {percentChange}</Typography>\n            </Grid>\n            <Grid item>\n              <Button\n                className={classes.button}\n                variant=\"contained\"\n                onClick={handleStockLink}\n              >\n                Details\n              </Button>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n}\n\nexport function StockListComponent(props) {\n  const [newStocks, setNewStocks] = useState([]);\n  const handleNewStock = (newStock) => {\n    let tempNewStocks = [...newStocks];\n    tempNewStocks.unshift(newStock);\n    setNewStocks(tempNewStocks);\n  };\n  return (\n    <div className={props.className}>\n      <StockList newStocks={newStocks} {...props} />\n      <br />\n    </div>\n  );\n}\n\nexport function StockDetailComponent(props) {\n  const { tickerinit } = props;\n  const [didStockLookup, setDidStockLookup] = useState(false);\n  const [ticker, setTicker] = useState(null);\n  const [isTracking, setIsTracking] = useState(false);\n  const [hasPrediction, setHasPrediction] = useState(false);\n  const [prediction, setPrediction] = useState(null);\n  const [didPredictionLookup, setDidPredictionLookup] = useState(false);\n\n  const handleBackendStockLookup = (response, status) => {\n    if (status === 200) {\n      setTicker(response.ticker);\n      setIsTracking(response.is_tracking);\n    } else {\n      Swal.fire({icon: 'error', title: 'Stock Error', text: 'Error finding stock'});\n    }\n  };\n\n  const handleBackendPredictionLookup = (response, status) => {\n    if (status === 200) {\n      const responsePrediction = response.prediction;\n      const newPrediction =\n        responsePrediction !== null\n          ? {\n              future_value: responsePrediction.future_value,\n              upper_value: responsePrediction.upper_value,\n              lower_value: responsePrediction.lower_value,\n              prediction_date: response.prediction_date,\n            }\n          : null;\n      setPrediction(newPrediction);\n      setHasPrediction(true);\n      setDidPredictionLookup(true);\n    } else {\n      Swal.fire({icon: 'error', title: 'Prediction Error', text: 'Unable to find prediction'});\n    }\n  };\n\n  const handleActionBackend = (response, status) => {\n    if (status === 200 && isTracking) {\n      setIsTracking(false);\n      setHasPrediction(false);\n      setPrediction(null);\n      setTicker(response.ticker);\n    } else if (status === 200 && !isTracking) {\n      setIsTracking(true);\n    } else if (status === 201 && isTracking) {\n      //console.log(\"New pred\", response);\n      const prediction = response.prediction;\n      const newPrediction = {\n        future_value: prediction.future_value,\n        upper_value: prediction.upper_value,\n        lower_value: prediction.lower_value,\n        prediction_date: response.prediction_date,\n      };\n      setPrediction(newPrediction);\n      setHasPrediction(true);\n    } else {\n      Swal.fire({icon: 'error', title: 'Action Error', text: `Can't add/remove, status: ${status}`});\n    }\n  };\n\n  useEffect(() => {\n    if (didStockLookup === false) {\n      apiStockLookup(tickerinit, handleBackendStockLookup);\n      setDidStockLookup(true);\n    }\n  }, [tickerinit, didStockLookup, setDidStockLookup]);\n  return ticker === null ? null : (\n    <div>\n      <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n        <Stock\n          symbol={ticker}\n          didPredictionLookup={didPredictionLookup}\n          prediction={prediction}\n          handleBackendPredictionLookup={handleBackendPredictionLookup}\n          className={props.className}\n        />\n        <PredictionComponent\n          ticker={ticker}\n          didPredictionLookup={didPredictionLookup}\n          prediction={prediction}\n          handleBackendPredictionLookup={handleBackendPredictionLookup}\n        />\n        <Grid container direction=\"row\" alignItems=\"center\" justify=\"center\">\n          <AddRemoveButton\n            ticker={ticker}\n            predict={false}\n            isTracking={isTracking}\n            handleActionBackend={handleActionBackend}\n          />\n          {isTracking && (\n            <ActionButton\n              ticker={ticker}\n              predict={true}\n              isTracking={isTracking}\n              handleActionBackend={handleActionBackend}\n            />\n          )}\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nfunction PredictionComponent(props) {\n  const {\n    ticker,\n    prediction,\n    didPredictionLookup,\n    handleBackendPredictionLookup,\n  } = props;\n  const classes = useStyles();\n\n  useEffect(() => {\n    if (!didPredictionLookup) {\n      apiPredictionLookup(ticker, handleBackendPredictionLookup);\n    }\n  });\n\n  return prediction !== null ? (\n    <div className=\"mb-1\">\n      <p>{}</p>\n      <Chip\n        label={\"Predicted Price: $\" + prediction.future_value.toFixed(2)}\n        className={classes.prediction}\n      />\n      <Chip\n        label={\n          \"Range: $\" +\n          prediction.lower_value.toFixed(2) +\n          \" to $\" +\n          prediction.upper_value.toFixed(2)\n        }\n        className={classes.prediction}\n      />\n      <Chip\n        label={\"Date: \" + prediction.prediction_date}\n        className={classes.prediction}\n      />\n    </div>\n  ) : null;\n}\n\nconst popularStocks = [\n  { ticker: \"AAPL\", company_name: \"Apple Inc.\" },\n  { ticker: \"TSLA\", company_name: \"Tesla, Inc.\" },\n  { ticker: \"AMZN\", company_name: \"Amazon.com, Inc.\" },\n  { ticker: \"NFLX\", company_name: \"Netflix, Inc.\" },\n  { ticker: \"MSFT\", company_name: \"Microsoft Corporation\" },\n];\n\nexport function LandingPageComponent(props) {\n  const classes = useStyles();\n  return (\n    <div>\n      <Grid container direction=\"row\" xs={12}>\n        <Grid container direction=\"column\" xs={6} alignItems=\"center\">\n          <Typography variant=\"h4\" className={classes.h4}>\n            Stock Prediction - Home\n          </Typography>\n          <Typography variant=\"h6\" align=\"center\">\n            Welcome to the Stock Prediction home page! Here you are able to\n            predict the prices of your favorite stocks on the stock market. To\n            begin, simply search a company name or stock ticker and hit enter.\n          </Typography>\n          <Grid item>\n            <Card className={classes.landingRoot}>\n              <CardMedia\n                className={classes.landingMedia}\n                component=\"img\"\n                image=\"https://user-images.githubusercontent.com/65428832/115729365-5ba3b300-a353-11eb-81a9-808eebcce8c2.png\"\n              />\n            </Card>\n          </Grid>\n          <Typography variant=\"h6\" align=\"center\">\n            Once your stock has loaded, you have the option to add it to your\n            watchlist. After adding it to your watchlist, you can predict the\n            stock's price giving you a 30 day forecast, or you can remove it if\n            you are no longer interested.\n          </Typography>\n          <Grid item>\n            <Card className={classes.landingRoot}>\n              <CardMedia\n                className={classes.landingMedia}\n                component=\"img\"\n                image=\"https://user-images.githubusercontent.com/65428832/115729385-5fcfd080-a353-11eb-8099-d263f6492f10.png\"\n              />\n            </Card>\n          </Grid>\n          <Typography variant=\"h6\" align=\"center\">\n            Thanks for using our website, we wish you the best of luck in the\n            market!\n          </Typography>\n        </Grid>\n        <Grid container direction=\"column\" xs={6} alignItems=\"center\">\n          <Typography variant=\"h4\" className={classes.h4}>\n            Popular Stocks\n          </Typography>\n          <StockList newStocks={popularStocks} {...props}></StockList>\n        </Grid>\n      </Grid>\n      <Typography variant=\"h4\" className={classes.h4} align=\"center\">\n        Your Tracked Stocks\n      </Typography>\n    </div>\n  );\n}\n\nconst useStyles = makeStyles({\n  root: {\n    background: \"linear-gradient(180deg, #FE6B8B 30%, #E8A87C 90%)\",\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    borderRadius: \"50px\",\n    width: 425,\n  },\n  header: {\n    textAlign: \"center\",\n  },\n  prediction: {\n    background: \"linear-gradient(180deg, #FE6B8B 30%, #E8A87C 90%)\",\n    marginLeft: \"5px\",\n  },\n  button: {\n    backgroundColor: \"white\",\n    color: \"black\",\n    borderRadius: \"50px\",\n  },\n  landingRoot: {\n    maxWidth: 550,\n    textAlign: \"center\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    margin: \"5px\",\n  },\n  h4: {\n    color: \"#FE6B8B\",\n  },\n  landingMedia: {\n    height: \"100%\",\n    width: \"100%\",\n  },\n});\n","C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\stocks\\buttons.js",["100","101"],"import React from 'react'\nimport {apiStockAction} from './lookup'\n\nimport { Button, makeStyles, fade, Slide, Dialog, DialogContent, DialogContentText, DialogActions, DialogTitle } from '@material-ui/core';\n\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        background: 'linear-gradient(180deg, #FE6B8B 30%, #E8A87C 90%)',\n        margin: '5px',\n        borderRadius: '50px',\n        \"&:hover\": {\n            background: 'linear-gradient(180deg, #FE6B8B 0%, #E8A87C 0%)',\n        }\n    },\n    dialog: {\n        justifyContent: 'center'\n    }\n}));\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props}/>;\n});\n\nexport function AddRemoveButton (props) {\n    const classes = useStyles();\n    const { ticker, isTracking, predict, handleActionBackend } = props;\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleClick = (event) => {\n        setOpen(false);\n        event.preventDefault()\n        apiStockAction(ticker, predict, handleActionBackend)\n    }\n    if (isTracking == true) {\n        return (\n            <div>\n                <Button variant=\"contained\" className={classes.button} onClick={handleClickOpen}>Remove</Button>\n                <Dialog open={open} TransitionComponent={Transition} keepMounted onClose={handleClose} aria-labelledby=\"alert-title\" aria-describedby=\"alert-description\">\n                    <DialogTitle id=\"alert-title\">{\"Remove stock?\"}</DialogTitle>\n                    <DialogContent>\n                        <DialogContentText id=\"alert-description\">Are you sure you want to remove this stock? Doing so will remove it from your list of tracked stocks.</DialogContentText>\n                    </DialogContent>\n                    <DialogActions className={classes.dialog}>\n                        <Button variant=\"contained\" className={classes.button} onClick={handleClick}>\n                            Remove\n                        </Button>\n                        <Button variant=\"contained\" className={classes.button} onClick={handleClose}>\n                            Cancel\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        );\n    } else {\n        return (\n            <div>\n                <Button variant=\"contained\" className={classes.button} onClick={handleClick}>\n                    Add\n                </Button>\n            </div>\n        )\n    }\n}\n\nexport function ActionButton (props) {\n    const classes = useStyles();\n    const {ticker, isTracking, predict, handleActionBackend} = props\n\n    const handleClick = (event) => {\n        event.preventDefault()\n        apiStockAction(ticker, predict, handleActionBackend)\n    }\n    const display = isTracking === true ? 'Remove' : 'Add'\n    return predict === true ? <Button variant=\"contained\" className={classes.button} onClick={handleClick}>Predict</Button> : <Button variant=\"contained\" className={classes.button} onClick={handleClick}> {display} </Button>\n}","C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\stocks\\lookup.js",[],"C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\App.js",[],"C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\stocks\\detail.js",["102","103"],"import { widget } from '../charting_library';\nimport React, { useEffect } from \"react\";\nimport Datafeed from \"./datafeed.js\"\nimport { apiPredictionLookup } from \"./lookup\";\nimport { Card, CardContent, makeStyles } from '@material-ui/core';\n\nfunction getLanguageFromURL() {\n\tconst regex = new RegExp('[\\\\?&]lang=([^&#]*)');\n\tconst results = regex.exec(window.location.search);\n\treturn results === null ? null : decodeURIComponent(results[1].replace(/\\+/g, ' '));\n}\nfunction americanDateToUnixTimestamp(date) {\n\t// mm/dd/yyyy to yyyy-mm-dd to Javascript timestamp (ms) to Unix timestamp (s)\n\tlet fields = date.split('/');\n\tdate = fields[2] + '-' + fields[0] + '-' + fields[1];\n\treturn new Date(date).getTime() / 1000;\n}\n\nconst defaultSettings = {\n\tsymbol: 'AAPL',\n\tinterval: 'D',\n\tcontainerId: 'tv_chart_container',\n\tdatafeedUrl: 'https://demo_feed.tradingview.com',\n\tlibraryPath: '/static/js/charting_library/', // Change to \"/static/js/charting_library/\" for django local and production\n\tchartsStorageUrl: 'https://saveload.tradingview.com',\n\tchartsStorageApiVersion: '1.1',\n\tclientId: 'tradingview.com',\n\tuserId: 'public_user_id',\n\tfullscreen: false,\n\tautosize: false,\n\tstudiesOverrides: {},\n};\nlet currPrediction = null;\nlet tvWidget = null;\n\nexport function Stock(props) {\n\tconst {\n\t\tsymbol,\n\t\tprediction,\n\t\tdidPredictionLookup,\n\t\thandleBackendPredictionLookup\n\t} = props;\n\tconst classes = useStyles();\n\tuseEffect(() => {\n\t\tconst widgetOptions = {\n\t\t\tsymbol: symbol ? symbol : defaultSettings.symbol, // Could throw warning here\n\t\t\t// BEWARE: no trailing slash is expected in feed URL\n\t\t\tdatafeed: Datafeed,\n\t\t\tinterval: defaultSettings.interval,\n\t\t\tcontainer_id: defaultSettings.containerId,\n\t\t\tlibrary_path: defaultSettings.libraryPath,\n\t\t\tlocale: getLanguageFromURL() || 'en',\n\t\t\tdisabled_features: [\n\t\t\t\t'use_localstorage_for_settings', \n\t\t\t\t'left_toolbar', \n\t\t\t\t'header_symbol_search', \n\t\t\t\t'display_market_status', \n\t\t\t\t'header_screenshot', \n\t\t\t\t'header_compare', \n\t\t\t\t'header_indicators', \n\t\t\t\t'compare_symbol', \n\t\t\t\t'header_saveload', \n\t\t\t\t'create_volume_indicator_by_default', \n\t\t\t\t'control_bar', \n\t\t\t\t'show_chart_property_page', \n\t\t\t\t'countdown'\n\t\t\t],\n\t\t\tenabled_features: ['study_templates'],\n\t\t\tcharts_storage_url: defaultSettings.chartsStorageUrl,\n\t\t\tcharts_storage_api_version: defaultSettings.chartsStorageApiVersion,\n\t\t\tclient_id: defaultSettings.clientId,\n\t\t\tuser_id: defaultSettings.userId,\n\t\t\tfullscreen: defaultSettings.fullscreen,\n\t\t\tautosize: defaultSettings.autosize,\n\t\t\tstudies_overrides: defaultSettings.studiesOverrides,\n\t\t};\n\t\ttvWidget = new widget(widgetOptions);\n\t\tif (didPredictionLookup === false && !currPrediction) {\n\t\t  apiPredictionLookup(symbol, handleBackendPredictionLookup);\n\t\t};\n\t\tif (prediction && !currPrediction) {\n\t\t\tcurrPrediction = prediction;\n\t\t\tconsole.log(\"prediction set\")\n\t\t\tconsole.log(currPrediction);\n\t\t}\n\t\tif (currPrediction !== null && tvWidget !== null) {\n\t\t\tconst currTime = new Date().getTime() / 1000;\n\t\t\tconst predTime = americanDateToUnixTimestamp(currPrediction.prediction_date);\n\t\t\ttvWidget.onChartReady(() => {\n\t\t\t\tconst chart = tvWidget.chart();\n\t\t\t\tconst {from, to} = chart.getVisibleRange();\n\t\t\t\tchart.setVisibleRange({from: from, to: predTime});\n\t\t\t\ttry {\n\t\t\t\t\tchart.createMultipointShape(\n\t\t\t\t\t\t[{\n\t\t\t\t\t\t\ttime: currTime,\n\t\t\t\t\t\t\tchannel: 'close'\n\t\t\t\t\t\t}, \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttime: predTime,\n\t\t\t\t\t\t\tprice: currPrediction.upper_value,\n\t\t\t\t\t\t\tchannel: 'close'\n\t\t\t\t\t\t}], \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tshape: 'trend_line',\n\t\t\t\t\t\t\tlock: true,\n\t\t\t\t\t\t\toverrides: {\n\t\t\t\t\t\t\t\tlinecolor: '#00ff00',\n\t\t\t\t\t\t\t\tlinestyle: 2\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, null\n\t\t\t\t\t);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.log(err);\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tchart.createMultipointShape(\n\t\t\t\t\t\t[{\n\t\t\t\t\t\t\ttime: currTime,\n\t\t\t\t\t\t\tchannel: 'close'\n\t\t\t\t\t\t}, \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttime: predTime, \n\t\t\t\t\t\t\tprice: currPrediction.lower_value,\n\t\t\t\t\t\t\tchannel: 'close'\n\t\t\t\t\t\t}], \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tshape: 'trend_line', \n\t\t\t\t\t\t\tlock: true,\n\t\t\t\t\t\t\toverrides: {\n\t\t\t\t\t\t\t\tlinecolor: '#ff0000',\n\t\t\t\t\t\t\t\tlinestyle: 2\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, null\n\t\t\t\t\t);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.log(err);\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tchart.createMultipointShape(\n\t\t\t\t\t\t[{\n\t\t\t\t\t\t\ttime: currTime,\n\t\t\t\t\t\t\tchannel: 'close'\n\t\t\t\t\t\t}, \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttime: predTime, \n\t\t\t\t\t\t\tprice: currPrediction.future_value,\n\t\t\t\t\t\t\tchannel: 'close'\n\t\t\t\t\t\t}], \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tshape: 'trend_line', \n\t\t\t\t\t\t\tlock: true,\n\t\t\t\t\t\t\toverrides: {\n\t\t\t\t\t\t\t\tlinecolor: '#000000',\n\t\t\t\t\t\t\t\tlinestyle: 2\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, null\n\t\t\t\t\t);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.log(err);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t}\n\t\treturn () => {\n\t\t\tif (tvWidget !== null) {\n\t\t\t\ttvWidget.remove();\n\t\t\t\ttvWidget = null;\n\t\t\t}\n\t\t\tcurrPrediction = null;\n\t\t}\n\t}, [prediction]);\n\n\treturn (\n\t\t<div>\n\t\t\t<Card className={classes.root}>\n\t\t\t\t<CardContent className={classes.content}>\n\t\t\t\t\t<div id={ defaultSettings.containerId } className={ 'TVChartContainer' }/>\n\t\t\t\t</CardContent>\n\t\t\t</Card>\n\t\t</div>\n\n\t);\n}\n\nconst useStyles = makeStyles({\n\troot: {\n\t\tmarginTop: '15px',\n\t\tmarginBottom: '4px'\n\t},\n\tcontent: {\n\t\tborderRadius: '50px'\n\t}\n});","C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\stocks\\list.js",["104"],"import React, { useEffect, useState } from \"react\";\n\nimport { apiStockList } from \"./lookup\";\n\nimport { StockLink } from \"./components\";\nimport Swal from 'sweetalert2';\n\nexport function StockList(props) {\n  const [stocksInit, setStocksInit] = useState([]);\n  const [stocks, setStocks] = useState([]);\n  const [stocksDidSet, setStocksDidSet] = useState(false);\n  const [hasPrediction, setHasPrediction] = useState(false);\n  const [prediction, setPrediction] = useState(null);\n  const [didPredictionLookup, setDidPredictionLookup] = useState(false);\n\n  const handleBackendPredictionLookup = (response, status) => {\n    if (status === 200) {\n      const responsePrediction = response.prediction;\n      const newPrediction =\n        responsePrediction !== null\n          ? {\n              future_value: responsePrediction.future_value,\n              upper_value: responsePrediction.upper_value,\n              lower_value: responsePrediction.lower_value,\n              prediction_date: response.prediction_date,\n            }\n          : null;\n      setPrediction(newPrediction);\n      setHasPrediction(true);\n      setDidPredictionLookup(true);\n    } else {\n      Swal.fire({icon: 'error', title: 'Prediction Error', text: 'Unable to find prediction'});\n    }\n  };\n\n  useEffect(() => {\n    const final = [...props.newStocks].concat(stocksInit);\n    if (final.length !== stocks.length) {\n      setStocks(final);\n    }\n  }, [props.newStocks, stocks, stocksInit]);\n\n  useEffect(() => {\n    if (stocksDidSet === false) {\n      const handleStockListLookup = (response, status) => {\n        if (status === 200) {\n          setStocksInit([...response]);\n          setStocksDidSet(true);\n        } else {\n          Swal.fire({icon: 'error', title: 'Error', text: `Error, status: ${status}`});\n        }\n      };\n      apiStockList(handleStockListLookup);\n    }\n  }, [stocksInit, stocksDidSet, setStocksDidSet]);\n\n  return (\n    <div>\n      {stocks !== null &&\n        stocks.map((item, index) => <StockLink \n          key={index}\n          stock={item}\n          length={stocks.length}\n          didPredictionLookup={didPredictionLookup}\n          prediction={prediction}\n          handleBackendPredictionLookup={handleBackendPredictionLookup}/>\n        )\n      }\n    </div>\n  );\n}\n","C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\stocks\\datafeed.js",["105"],"import { subscribeOnStream, unsubscribeFromStream } from './streaming.js'\n// Remove Finnhub import and API key setup\n// const finnhub = require('finnhub');\n// const api_key = finnhub.ApiClient.instance.authentications['api_key'];\n// api_key.apiKey = authToken;\n\nconst lastBarsCache = new Map();\n\nconst configurationData = {\n    supported_resolutions: ['1D', '1W', '1M'], // Will need to check if these resolutions are valid\n    exchanges: [\n        {\n            value: 'NYSE',\n            name: 'NYSE',\n            desc: 'New York Stock Exchange'\n        }\n    ],\n    symbol_types: [\n        {\n            name: 'Common Stock',\n            value: 'stock'\n        }\n    ]\n};\n\nexport default {\n    onReady: (\n        callback\n    ) => {\n        setTimeout(() => callback(configurationData));\n    },\n    resolveSymbol: async (\n        symbolName,\n        onSymbolResolvedCallback,\n        onResolveErrorCallback\n    ) => {\n        // Use Yahoo Finance API instead of Finnhub\n        try {\n            const response = await fetch(`https://query1.finance.yahoo.com/v8/finance/chart/${symbolName}?interval=1d&range=1d`);\n            const data = await response.json();\n            \n            if (data.chart.result && data.chart.result.length > 0) {\n                const symbolInfo = {\n                    ticker: symbolName,\n                    name: symbolName,\n                    description: symbolName,\n                    type: 'stock',\n                    session: '24x7',\n                    timezone: 'Etc/UTC',\n                    exchange: \"NYSE\",\n                    minmov: 1,\n                    pricescale: 100,\n                    has_intraday: false,\n                    has_no_volume: true,\n                    has_weekly_and_monthly: false,\n                    supported_resolutions: configurationData.supported_resolutions,\n                    volume_precision: 2,\n                    data_status: 'streaming',\n                };\n                onSymbolResolvedCallback(symbolInfo);\n            } else {\n                onResolveErrorCallback(`Cannot resolve symbol: ${symbolName}`);\n            }\n        } catch (error) {\n            onResolveErrorCallback(`Cannot resolve symbol: ${symbolName}`);\n        }\n    },\n    getBars: async (\n        symbolInfo,\n        resolution,\n        from,\n        to,\n        onHistoryCallback,\n        onErrorCallback,\n        firstDataRequest\n    ) => {\n        const TV2YahooResolutions = {\"1D\":\"1d\", \"1W\":\"5d\", \"1M\":\"1mo\"};\n        \n        try {\n            const response = await fetch(`https://query1.finance.yahoo.com/v8/finance/chart/${symbolInfo.ticker}?interval=${TV2YahooResolutions[resolution]}&period1=${from}&period2=${to}`);\n            const data = await response.json();\n            \n            if (data.chart.result && data.chart.result.length > 0) {\n                const result = data.chart.result[0];\n                const timestamps = result.timestamp;\n                const quotes = result.indicators.quote[0];\n                \n                let bars = [];\n                for (let i = 0; i < timestamps.length; i++) {\n                    if (quotes.open[i] && quotes.high[i] && quotes.low[i] && quotes.close[i]) {\n                        bars.push({\n                            time: timestamps[i] * 1000,\n                            low: quotes.low[i],\n                            high: quotes.high[i],\n                            open: quotes.open[i],\n                            close: quotes.close[i]\n                        });\n                    }\n                }\n                \n                if (firstDataRequest && bars.length > 0) {\n                    lastBarsCache.set(symbolInfo.ticker, { ...bars[bars.length - 1] });\n                }\n                \n                onHistoryCallback(bars, {noData: bars.length === 0});\n            } else {\n                onHistoryCallback([], {noData: true});\n            }\n        } catch (error) {\n            onErrorCallback(error);\n        }\n    },\n    searchSymbols: async (\n        userInput,\n        exchange,\n        symbolType,\n        onResultReadyCallback\n    ) => {\n        console.log(\"SEARCHED\");\n        // Implement symbol search if needed\n        onResultReadyCallback([]);\n    },\n    subscribeBars: (\n        symbolInfo,\n        resolution,\n        onRealtimeCallback,\n        subscribeUID,\n        onResetCacheNeededCallback\n    ) => {\n        subscribeOnStream(\n            symbolInfo.ticker,\n            resolution,\n            onRealtimeCallback,\n            subscribeUID,\n            onResetCacheNeededCallback,\n            lastBarsCache.get(symbolInfo.ticker)\n        );\n    },\n    unsubscribeBars: (\n        subscriberUID\n    ) => {\n        unsubscribeFromStream(subscriberUID);\n    }\n};\n","C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\lookup\\index.js",[],"C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\stocks\\streaming.js",["106"],"// Remove Finnhub WebSocket dependency\n// import { authToken } from '../App.js' \n// const socket = new WebSocket(`wss://ws.finnhub.io?token=${authToken}`);\n// document.cookie = `X-Authorization=${authToken}; path=/` \n\nfunction getNextDailyBarTime(barTime) {\n    const date = new Date(barTime);\n    date.setDate(date.getDate() + 1);\n    return date.getTime();\n}\n\nexport function subscribeOnStream(\n    symbolInfo,\n    resolution,\n    onRealtimeCallback,\n    subscriberUID,\n    onResetCacheNeededCallback,\n    lastDailyBar\n) {\n    // Since we're using Yahoo Finance API, we'll implement a simple polling mechanism\n    // instead of WebSocket streaming\n    console.log('Subscribing to symbol:', symbolInfo.ticker);\n    \n    // For now, we'll just acknowledge the subscription\n    // In a real implementation, you might want to set up polling here\n}\n\nexport function unsubscribeFromStream(subscriberUID) {\n    console.log('Unsubscribing from stream:', subscriberUID);\n    // Clean up any polling intervals if needed\n}","C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\charting_library\\charting_library.esm.js",[],"C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\lookup\\components.js",[],"C:\\Users\\admin\\Downloads\\Compressed\\StockPrediction\\StockPrediction\\stockpre-web\\src\\ENV.js",[],{"ruleId":"107","severity":1,"message":"108","line":1,"column":16,"nodeType":"109","messageId":"110","endLine":1,"endColumn":25},{"ruleId":"107","severity":1,"message":"111","line":2,"column":10,"nodeType":"109","messageId":"110","endLine":2,"endColumn":23},{"ruleId":"107","severity":1,"message":"112","line":10,"column":9,"nodeType":"109","messageId":"110","endLine":10,"endColumn":16},{"ruleId":"113","severity":1,"message":"114","line":51,"column":6,"nodeType":"115","endLine":51,"endColumn":18,"suggestions":"116"},{"ruleId":"107","severity":1,"message":"117","line":9,"column":8,"nodeType":"109","messageId":"110","endLine":9,"endColumn":12},{"ruleId":"107","severity":1,"message":"118","line":10,"column":8,"nodeType":"109","messageId":"110","endLine":10,"endColumn":10},{"ruleId":"107","severity":1,"message":"119","line":6,"column":10,"nodeType":"109","messageId":"110","endLine":6,"endColumn":19},{"ruleId":"107","severity":1,"message":"120","line":12,"column":3,"nodeType":"109","messageId":"110","endLine":12,"endColumn":17},{"ruleId":"107","severity":1,"message":"121","line":19,"column":3,"nodeType":"109","messageId":"110","endLine":19,"endColumn":8},{"ruleId":"107","severity":1,"message":"122","line":42,"column":9,"nodeType":"109","messageId":"110","endLine":42,"endColumn":21},{"ruleId":"107","severity":1,"message":"123","line":56,"column":17,"nodeType":"109","messageId":"110","endLine":56,"endColumn":26},{"ruleId":"113","severity":1,"message":"124","line":92,"column":6,"nodeType":"115","endLine":92,"endColumn":70,"suggestions":"125"},{"ruleId":"107","severity":1,"message":"126","line":149,"column":9,"nodeType":"109","messageId":"110","endLine":149,"endColumn":23},{"ruleId":"107","severity":1,"message":"127","line":167,"column":10,"nodeType":"109","messageId":"110","endLine":167,"endColumn":23},{"ruleId":"107","severity":1,"message":"128","line":4,"column":30,"nodeType":"109","messageId":"110","endLine":4,"endColumn":34},{"ruleId":"129","severity":1,"message":"130","line":43,"column":20,"nodeType":"131","messageId":"132","endLine":43,"endColumn":22},{"ruleId":"107","severity":1,"message":"133","line":91,"column":18,"nodeType":"109","messageId":"110","endLine":91,"endColumn":20},{"ruleId":"113","severity":1,"message":"134","line":172,"column":5,"nodeType":"115","endLine":172,"endColumn":17,"suggestions":"135"},{"ruleId":"107","severity":1,"message":"127","line":12,"column":10,"nodeType":"109","messageId":"110","endLine":12,"endColumn":23},{"ruleId":"136","severity":1,"message":"137","line":26,"column":1,"nodeType":"138","endLine":144,"endColumn":3},{"ruleId":"107","severity":1,"message":"139","line":6,"column":10,"nodeType":"109","messageId":"110","endLine":6,"endColumn":29},"no-unused-vars","'InputBase' is defined but never used.","Identifier","unusedVar","'SearchRounded' is defined but never used.","'classes' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleSearchTermLookup'. Either include it or remove the dependency array.","ArrayExpression",["140"],"'Papa' is defined but never used.","'fs' is defined but never used.","'authToken' is defined but never used.","'CardActionArea' is defined but never used.","'Paper' is defined but never used.","'handleRemove' is assigned a value but never used.","'timestamp' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currPrediction', 'length', 'stock.ticker', and 'update'. Either include them or remove the dependency array.",["141"],"'handleNewStock' is assigned a value but never used.","'hasPrediction' is assigned a value but never used.","'fade' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'to' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'didPredictionLookup', 'handleBackendPredictionLookup', and 'symbol'. Either include them or remove the dependency array.",["142"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'getNextDailyBarTime' is defined but never used.",{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},"Update the dependencies array to be: [handleSearchTermLookup, searchTerm]",{"range":"149","text":"150"},"Update the dependencies array to be: [currPrediction, didPredictionLookup, handleBackendPredictionLookup, length, prediction, stock.ticker, update]",{"range":"151","text":"152"},"Update the dependencies array to be: [didPredictionLookup, handleBackendPredictionLookup, prediction, symbol]",{"range":"153","text":"154"},[1738,1750],"[handleSearchTermLookup, searchTerm]",[2730,2794],"[currPrediction, didPredictionLookup, handleBackendPredictionLookup, length, prediction, stock.ticker, update]",[4638,4650],"[didPredictionLookup, handleBackendPredictionLookup, prediction, symbol]"]